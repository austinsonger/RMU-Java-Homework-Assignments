	bool loadFile()
	{
		int indexx = 0;
		int indexy = 0;
		string line;
		ifstream filep(this->file);

		if (filep.is_open())
		{
			cout << "File Opened" << endl;
			/*
			Read the first line
			*/
			if (getline(filep, line))
			{
				cout << "Read the W&H" << endl;
				/*
				Get Width and Height
				*/
				istringstream read(line);

				if (!(read >> width >> height))
				{
					cout << "Unable to read specs for matix" << endl;
					return false;
				}
			}
			else
			{
				cout << "Unable to read first line for specs" << endl
					return false;
			}
			if (width > 0 && height > 0)
				/*
				Initialize the initial array
				*/
				current = new vector<vector<char>>;
			/*
			Read the initial configuration for the puzzle
			1>Read the number of lines => height
			2>Number of chars =>width
			*/

			/*
			********************************************
			Read the initial configuration
			********************************************
			*/
			for (int i = 0; i < height; i++)
			{
				if (getline(filep, line))
				{
					/*
					Check the line length to verify the number of blocks /width
					*/
					if (line.length() != width)
					{
						cout << "Unable to read initial configuration" << endl;
						return false;
					}
					else
					{
						vector<char> row;
						row.clear();
						for (int j = 0; j < width; j++)
						{
							row.push_back = line[j];
						}
						current.push(row);
					}
				}
			}
			/*
			********************************************
			Read the Blank Line
			********************************************
			*/
			//			line.clear() :
			if (getline(filep, line))
			{
				if (!line.empty())
				{
					cout << "No spaceer line : invalid format" << endl;
					return false;
				}
			}
			else
			{
				cout << "No spaceer line : invalid format" << endl;
				return false;
			}

			/*
			********************************************
			Read the final configuration
			********************************************
			*/
			/*
			Initialize the initial array
			*/
			finalstate = new vector<vector<char>>;

			indexx = 0;
			indexy = 0;
			for (int i = 0; i < height; i++)
			{
				if (getline(filep, line))
				{
					/*
					Check the line length to verify the number of blocks /width
					*/
					if (line.length() != width)
					{
						cout << "Unable to read initial configuration" << endl;
						return false;
					}
					else
					{
						vector<char> row;
						row.clear();
						for (int j = 0; j < width; j++)
						{
							row.push_back(line[j]);
						}
						finalstate.push(row);
					}
				}
			}
			else{
				cout << "Unable to read initial configuration" << endl;
				return false;
			}
		}
		else
		{
			cout << "Unable to open File" << endl;
			return false;
		}
	}
